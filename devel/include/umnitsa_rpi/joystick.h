// Generated by gencpp from file umnitsa_rpi/joystick.msg
// DO NOT EDIT!


#ifndef UMNITSA_RPI_MESSAGE_JOYSTICK_H
#define UMNITSA_RPI_MESSAGE_JOYSTICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace umnitsa_rpi
{
template <class ContainerAllocator>
struct joystick_
{
  typedef joystick_<ContainerAllocator> Type;

  joystick_()
    : B(false)
    , A(false)
    , Y(false)
    , X(false)
    , L(false)
    , R(false)
    , ZL(false)
    , ZR(false)
    , MINUS(false)
    , PLUS(false)
    , LCLICK(false)
    , RCLICK(false)
    , HOME(false)
    , CAPTURE(false)
    , UP(false)
    , RIGHT(false)
    , LTOGRIGHT(0.0)
    , LTOGUP(0.0)
    , RTOGRIGHT(0.0)
    , RTOGUP(0.0)  {
    }
  joystick_(const ContainerAllocator& _alloc)
    : B(false)
    , A(false)
    , Y(false)
    , X(false)
    , L(false)
    , R(false)
    , ZL(false)
    , ZR(false)
    , MINUS(false)
    , PLUS(false)
    , LCLICK(false)
    , RCLICK(false)
    , HOME(false)
    , CAPTURE(false)
    , UP(false)
    , RIGHT(false)
    , LTOGRIGHT(0.0)
    , LTOGUP(0.0)
    , RTOGRIGHT(0.0)
    , RTOGUP(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _B_type;
  _B_type B;

   typedef uint8_t _A_type;
  _A_type A;

   typedef uint8_t _Y_type;
  _Y_type Y;

   typedef uint8_t _X_type;
  _X_type X;

   typedef uint8_t _L_type;
  _L_type L;

   typedef uint8_t _R_type;
  _R_type R;

   typedef uint8_t _ZL_type;
  _ZL_type ZL;

   typedef uint8_t _ZR_type;
  _ZR_type ZR;

   typedef uint8_t _MINUS_type;
  _MINUS_type MINUS;

   typedef uint8_t _PLUS_type;
  _PLUS_type PLUS;

   typedef uint8_t _LCLICK_type;
  _LCLICK_type LCLICK;

   typedef uint8_t _RCLICK_type;
  _RCLICK_type RCLICK;

   typedef uint8_t _HOME_type;
  _HOME_type HOME;

   typedef uint8_t _CAPTURE_type;
  _CAPTURE_type CAPTURE;

   typedef uint8_t _UP_type;
  _UP_type UP;

   typedef uint8_t _RIGHT_type;
  _RIGHT_type RIGHT;

   typedef float _LTOGRIGHT_type;
  _LTOGRIGHT_type LTOGRIGHT;

   typedef float _LTOGUP_type;
  _LTOGUP_type LTOGUP;

   typedef float _RTOGRIGHT_type;
  _RTOGRIGHT_type RTOGRIGHT;

   typedef float _RTOGUP_type;
  _RTOGUP_type RTOGUP;





  typedef boost::shared_ptr< ::umnitsa_rpi::joystick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::umnitsa_rpi::joystick_<ContainerAllocator> const> ConstPtr;

}; // struct joystick_

typedef ::umnitsa_rpi::joystick_<std::allocator<void> > joystick;

typedef boost::shared_ptr< ::umnitsa_rpi::joystick > joystickPtr;
typedef boost::shared_ptr< ::umnitsa_rpi::joystick const> joystickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::umnitsa_rpi::joystick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::umnitsa_rpi::joystick_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace umnitsa_rpi

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'umnitsa_rpi': ['/home/derek/Documents/umnitsa/src/umnitsa_rpi/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::umnitsa_rpi::joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::umnitsa_rpi::joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::umnitsa_rpi::joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::umnitsa_rpi::joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::umnitsa_rpi::joystick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::umnitsa_rpi::joystick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::umnitsa_rpi::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eecd6f451cf88ba32eb3689bc81dee01";
  }

  static const char* value(const ::umnitsa_rpi::joystick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeecd6f451cf88ba3ULL;
  static const uint64_t static_value2 = 0x2eb3689bc81dee01ULL;
};

template<class ContainerAllocator>
struct DataType< ::umnitsa_rpi::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "umnitsa_rpi/joystick";
  }

  static const char* value(const ::umnitsa_rpi::joystick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::umnitsa_rpi::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool B\n\
bool A\n\
bool Y\n\
bool X\n\
bool L\n\
bool R\n\
bool ZL\n\
bool ZR\n\
bool MINUS\n\
bool PLUS\n\
bool LCLICK\n\
bool RCLICK\n\
bool HOME\n\
bool CAPTURE\n\
bool UP\n\
bool RIGHT\n\
float32 LTOGRIGHT\n\
float32 LTOGUP\n\
float32 RTOGRIGHT\n\
float32 RTOGUP\n\
";
  }

  static const char* value(const ::umnitsa_rpi::joystick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::umnitsa_rpi::joystick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.B);
      stream.next(m.A);
      stream.next(m.Y);
      stream.next(m.X);
      stream.next(m.L);
      stream.next(m.R);
      stream.next(m.ZL);
      stream.next(m.ZR);
      stream.next(m.MINUS);
      stream.next(m.PLUS);
      stream.next(m.LCLICK);
      stream.next(m.RCLICK);
      stream.next(m.HOME);
      stream.next(m.CAPTURE);
      stream.next(m.UP);
      stream.next(m.RIGHT);
      stream.next(m.LTOGRIGHT);
      stream.next(m.LTOGUP);
      stream.next(m.RTOGRIGHT);
      stream.next(m.RTOGUP);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joystick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::umnitsa_rpi::joystick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::umnitsa_rpi::joystick_<ContainerAllocator>& v)
  {
    s << indent << "B: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.B);
    s << indent << "A: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.A);
    s << indent << "Y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Y);
    s << indent << "X: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.X);
    s << indent << "L: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.L);
    s << indent << "R: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R);
    s << indent << "ZL: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ZL);
    s << indent << "ZR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ZR);
    s << indent << "MINUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MINUS);
    s << indent << "PLUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PLUS);
    s << indent << "LCLICK: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LCLICK);
    s << indent << "RCLICK: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RCLICK);
    s << indent << "HOME: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HOME);
    s << indent << "CAPTURE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAPTURE);
    s << indent << "UP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.UP);
    s << indent << "RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RIGHT);
    s << indent << "LTOGRIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.LTOGRIGHT);
    s << indent << "LTOGUP: ";
    Printer<float>::stream(s, indent + "  ", v.LTOGUP);
    s << indent << "RTOGRIGHT: ";
    Printer<float>::stream(s, indent + "  ", v.RTOGRIGHT);
    s << indent << "RTOGUP: ";
    Printer<float>::stream(s, indent + "  ", v.RTOGUP);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UMNITSA_RPI_MESSAGE_JOYSTICK_H
