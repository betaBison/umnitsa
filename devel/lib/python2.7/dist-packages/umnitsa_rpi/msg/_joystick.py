# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from umnitsa_rpi/joystick.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class joystick(genpy.Message):
  _md5sum = "eecd6f451cf88ba32eb3689bc81dee01"
  _type = "umnitsa_rpi/joystick"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool B
bool A
bool Y
bool X
bool L
bool R
bool ZL
bool ZR
bool MINUS
bool PLUS
bool LCLICK
bool RCLICK
bool HOME
bool CAPTURE
bool UP
bool RIGHT
float32 LTOGRIGHT
float32 LTOGUP
float32 RTOGRIGHT
float32 RTOGUP
"""
  __slots__ = ['B','A','Y','X','L','R','ZL','ZR','MINUS','PLUS','LCLICK','RCLICK','HOME','CAPTURE','UP','RIGHT','LTOGRIGHT','LTOGUP','RTOGRIGHT','RTOGUP']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       B,A,Y,X,L,R,ZL,ZR,MINUS,PLUS,LCLICK,RCLICK,HOME,CAPTURE,UP,RIGHT,LTOGRIGHT,LTOGUP,RTOGRIGHT,RTOGUP

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(joystick, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.B is None:
        self.B = False
      if self.A is None:
        self.A = False
      if self.Y is None:
        self.Y = False
      if self.X is None:
        self.X = False
      if self.L is None:
        self.L = False
      if self.R is None:
        self.R = False
      if self.ZL is None:
        self.ZL = False
      if self.ZR is None:
        self.ZR = False
      if self.MINUS is None:
        self.MINUS = False
      if self.PLUS is None:
        self.PLUS = False
      if self.LCLICK is None:
        self.LCLICK = False
      if self.RCLICK is None:
        self.RCLICK = False
      if self.HOME is None:
        self.HOME = False
      if self.CAPTURE is None:
        self.CAPTURE = False
      if self.UP is None:
        self.UP = False
      if self.RIGHT is None:
        self.RIGHT = False
      if self.LTOGRIGHT is None:
        self.LTOGRIGHT = 0.
      if self.LTOGUP is None:
        self.LTOGUP = 0.
      if self.RTOGRIGHT is None:
        self.RTOGRIGHT = 0.
      if self.RTOGUP is None:
        self.RTOGUP = 0.
    else:
      self.B = False
      self.A = False
      self.Y = False
      self.X = False
      self.L = False
      self.R = False
      self.ZL = False
      self.ZR = False
      self.MINUS = False
      self.PLUS = False
      self.LCLICK = False
      self.RCLICK = False
      self.HOME = False
      self.CAPTURE = False
      self.UP = False
      self.RIGHT = False
      self.LTOGRIGHT = 0.
      self.LTOGUP = 0.
      self.RTOGRIGHT = 0.
      self.RTOGUP = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16B4f().pack(_x.B, _x.A, _x.Y, _x.X, _x.L, _x.R, _x.ZL, _x.ZR, _x.MINUS, _x.PLUS, _x.LCLICK, _x.RCLICK, _x.HOME, _x.CAPTURE, _x.UP, _x.RIGHT, _x.LTOGRIGHT, _x.LTOGUP, _x.RTOGRIGHT, _x.RTOGUP))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.B, _x.A, _x.Y, _x.X, _x.L, _x.R, _x.ZL, _x.ZR, _x.MINUS, _x.PLUS, _x.LCLICK, _x.RCLICK, _x.HOME, _x.CAPTURE, _x.UP, _x.RIGHT, _x.LTOGRIGHT, _x.LTOGUP, _x.RTOGRIGHT, _x.RTOGUP,) = _get_struct_16B4f().unpack(str[start:end])
      self.B = bool(self.B)
      self.A = bool(self.A)
      self.Y = bool(self.Y)
      self.X = bool(self.X)
      self.L = bool(self.L)
      self.R = bool(self.R)
      self.ZL = bool(self.ZL)
      self.ZR = bool(self.ZR)
      self.MINUS = bool(self.MINUS)
      self.PLUS = bool(self.PLUS)
      self.LCLICK = bool(self.LCLICK)
      self.RCLICK = bool(self.RCLICK)
      self.HOME = bool(self.HOME)
      self.CAPTURE = bool(self.CAPTURE)
      self.UP = bool(self.UP)
      self.RIGHT = bool(self.RIGHT)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16B4f().pack(_x.B, _x.A, _x.Y, _x.X, _x.L, _x.R, _x.ZL, _x.ZR, _x.MINUS, _x.PLUS, _x.LCLICK, _x.RCLICK, _x.HOME, _x.CAPTURE, _x.UP, _x.RIGHT, _x.LTOGRIGHT, _x.LTOGUP, _x.RTOGRIGHT, _x.RTOGUP))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.B, _x.A, _x.Y, _x.X, _x.L, _x.R, _x.ZL, _x.ZR, _x.MINUS, _x.PLUS, _x.LCLICK, _x.RCLICK, _x.HOME, _x.CAPTURE, _x.UP, _x.RIGHT, _x.LTOGRIGHT, _x.LTOGUP, _x.RTOGRIGHT, _x.RTOGUP,) = _get_struct_16B4f().unpack(str[start:end])
      self.B = bool(self.B)
      self.A = bool(self.A)
      self.Y = bool(self.Y)
      self.X = bool(self.X)
      self.L = bool(self.L)
      self.R = bool(self.R)
      self.ZL = bool(self.ZL)
      self.ZR = bool(self.ZR)
      self.MINUS = bool(self.MINUS)
      self.PLUS = bool(self.PLUS)
      self.LCLICK = bool(self.LCLICK)
      self.RCLICK = bool(self.RCLICK)
      self.HOME = bool(self.HOME)
      self.CAPTURE = bool(self.CAPTURE)
      self.UP = bool(self.UP)
      self.RIGHT = bool(self.RIGHT)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B4f = None
def _get_struct_16B4f():
    global _struct_16B4f
    if _struct_16B4f is None:
        _struct_16B4f = struct.Struct("<16B4f")
    return _struct_16B4f
